10x10 named shared memory

A,B,c
C=A*B
also should work for A=C*B

nameshot memory = 0 or 1


main()
{
    if id == 0 {
        O_CREATE
        A, B, C
    }
} else 
{
    link A, B, C
    gather()
}
gather()
print C; 

// another solution, every gather function gets its own number gather(1), gather(2), gather(3)

C = A * B;

gather() // has to start in 0, has to be done before other processes go further
{
    s[par_id]++
    while all s[i] < g
    {
        if(s==par_count)
        {
            break;
        }
    }
}


how to get time bonus:

gather()
take time
gather()
criticalsectiongather
take time

-----

Thursday class:

debug using print statements

most of the time you need to test the synch function

coutcc"before sync 1:""cc id c = enoec" // idk if enoec is correct i couldnt read the handwriting
synch()
coutcc"before sync 1:""cc id c = enoec"
sleep(5);
work();
synch();
work();
coutcc"before sync 1:""cc id c = enoec"

how to check, terminal output should look something like this:
bs1: 3
bs1: 0
bs1: 2
bs1: 1
--
bs2: 0
bs2: 1
bs2: 3
bs2: 2


BYTE
float *A;

if(id == 0)
{
    float *A = mmap(...) // DON'T DECLARE IN THIS PROGRAM BLOCK, it will die outside of the program BLOCK
} // dead after this }
else
{
    sleep(1);
} link

MPI function:
should be able to handle up to 5 processes:

typedef char* pc; // character is a point of characters
pc myorgs[4]'
myorgs[0] = malloc(100);
myorgs[1] = malloc(100);
myorgs[2] = malloc(100);
myorgs[3] = NULL;

for(n)
{
    if(for() == 0)
    {
    execv("./calc"," // arguments: calc /* argv[1] */ 4 /* argv[2] */ 0-3, NULL)
    // if its not successful then return
    }
}

// same as you did in the Lab
// parrallel MPI video on canvas during week 5

C = A*B;
synch()
if(id==0)
{
    print C
}
A = C*B;

*use gather function
for timing print only 1 function



-----

Message Passing Interface

Original Lab 5:

Program 1:

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>

int main() {
    const char *shared_memory_name = "ARNE_SharedMemory";
    const int shared_memory_size = 1024;

    int shm_fd = shm_open(shared_memory_name, O_CREAT | O_RDWR, 0666); //0666 permission code for read and write
    ftruncate(shm_fd, shared_memory_size); // size of shared memory

    char *shm_ptr = mmap(0, shared_memory_size, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
    memset(shm_ptr, 0, shared_memory_size); // intiialize shared memory with 0

    while (1) { // checks if theres user input 
        printf("Enter a message (type 'quit' to exit): ");
        char message[shared_memory_size];
        fgets(message, shared_memory_size, stdin);
        message[strcspn(message, "\n")] = 0;

        if (strcmp(message, "quit") == 0) break;
// if user calls for break
        strncpy(shm_ptr, message, shared_memory_size - 1);
    }

    shm_unlink(shared_memory_name); // closes the shared memory
    munmap(shm_ptr, shared_memory_size);
    close(shm_fd);

    return 0;
}


Program 2:

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>

int main() {
    const char *shared_memory_name = "ARNE_SharedMemory";
    const int shared_memory_size = 1024;

    int shm_fd = shm_open(shared_memory_name, O_RDWR, 0666); // opens the shared memory

    if (shm_fd == -1) {
        perror("Failed to open shared memory");
        exit(1);
    }

    char *shm_ptr = mmap(0, shared_memory_size, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);

    while (1) {
        if (strlen(shm_ptr) > 0) { // check if shared memory contains
            printf("Received message: %s\n", shm_ptr);
            break;
        }
        sleep(1);
    }

    munmap(shm_ptr, shared_memory_size);
    close(shm_fd);

    return 0;
}

---
How to generate random numbers to test the code:

srand(time(0))
inti = rand